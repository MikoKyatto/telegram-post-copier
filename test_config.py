"""
üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
"""

import sys
import os
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

def print_success(msg):
    print(f"{Fore.GREEN}‚úÖ {msg}{Style.RESET_ALL}")

def print_error(msg):
    print(f"{Fore.RED}‚ùå {msg}{Style.RESET_ALL}")

def print_warning(msg):
    print(f"{Fore.YELLOW}‚ö†Ô∏è  {msg}{Style.RESET_ALL}")

def print_info(msg):
    print(f"{Fore.CYAN}‚ÑπÔ∏è  {msg}{Style.RESET_ALL}")

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    if not os.path.exists('.env'):
        print_error(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print_info("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: cp env.example .env")
        return False
    print_success(".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    return True

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config import Config
        
        errors = Config.validate()
        
        if errors:
            print_error("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                print(f"  {error}")
            return False
        
        print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
        print("\n" + "=" * 50)
        print(f"{Fore.CYAN}üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:{Style.RESET_ALL}")
        print("=" * 50)
        print(f"API ID: {Config.API_ID}")
        print(f"Source Channel: {Config.SOURCE_CHANNEL}")
        print(f"Target Channel: {Config.TARGET_CHANNEL}")
        print(f"LLM Provider: {Config.LLM_PROVIDER}")
        print(f"LLM Model: {Config.LLM_MODEL}")
        print(f"Your Link: {Config.YOUR_LINK}")
        print(f"Brand Name: {Config.YOUR_BRAND_NAME}")
        print(f"Check Interval: {Config.CHECK_INTERVAL}s")
        print("=" * 50 + "\n")
        
        return True
        
    except ImportError as e:
        print_error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print(f"\n{Fore.CYAN}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Style.RESET_ALL}")
    
    required_packages = [
        'telethon',
        'opencv-python',
        'pytesseract',
        'PIL',
        'openai',
        'requests',
        'dotenv'
    ]
    
    all_installed = True
    
    for package in required_packages:
        try:
            if package == 'opencv-python':
                import cv2
            elif package == 'PIL':
                from PIL import Image
            elif package == 'dotenv':
                from dotenv import load_dotenv
            else:
                __import__(package)
            print_success(f"{package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print_error(f"{package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_installed = False
    
    if not all_installed:
        print_warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    return True

def check_tesseract():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR"""
    print(f"\n{Fore.CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR...{Style.RESET_ALL}")
    
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print_success(f"Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {version}")
        return True
    except Exception as e:
        print_error(f"Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        print_info("macOS: brew install tesseract tesseract-lang")
        print_info("Linux: sudo apt install tesseract-ocr tesseract-ocr-rus")
        print_info("Windows: https://github.com/UB-Mannheim/tesseract/wiki")
        return False

def check_llm_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ LLM API –∫–ª—é—á–∞"""
    print(f"\n{Fore.CYAN}üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM API...{Style.RESET_ALL}")
    
    try:
        from config import Config
        
        if Config.LLM_PROVIDER == 'deepseek' and Config.DEEPSEEK_API_KEY:
            print_success(f"DeepSeek API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {Config.DEEPSEEK_API_KEY[:10]}...)")
        elif Config.LLM_PROVIDER == 'openai' and Config.OPENAI_API_KEY:
            print_success(f"OpenAI API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {Config.OPENAI_API_KEY[:10]}...)")
        elif Config.LLM_PROVIDER == 'xai' and Config.XAI_API_KEY:
            print_success(f"xAI API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print_error(f"API –∫–ª—é—á –¥–ª—è {Config.LLM_PROVIDER} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM API: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"\n{Fore.MAGENTA}{'=' * 50}")
    print(f"ü¶Ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram Post Copier")
    print(f"{'=' * 50}{Style.RESET_ALL}\n")
    
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    results.append(("–§–∞–π–ª .env", check_env_file()))
    
    if results[-1][1]:  # –ï—Å–ª–∏ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config()))
    
    results.append(("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_dependencies()))
    results.append(("Tesseract OCR", check_tesseract()))
    
    if results[1][1]:  # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        results.append(("LLM API", check_llm_api()))
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{Fore.MAGENTA}{'=' * 50}")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"{'=' * 50}{Style.RESET_ALL}\n")
    
    for name, status in results:
        if status:
            print_success(f"{name}")
        else:
            print_error(f"{name}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    all_passed = all(status for _, status in results)
    
    print(f"\n{Fore.MAGENTA}{'=' * 50}{Style.RESET_ALL}")
    
    if all_passed:
        print_success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ üöÄ")
        print_info("–ó–∞–ø—É—Å–∫: python copier.py")
        return 0
    else:
        print_error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print_info("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: python test_config.py")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

