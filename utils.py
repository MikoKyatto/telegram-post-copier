"""
üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import re
import hashlib
from typing import Optional
import logging

logger = logging.getLogger(__name__)


def extract_links(text: str) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è t.me –∏ http(s) —Å—Å—ã–ª–æ–∫
    pattern = r'(?:https?://|t\.me/)[\w\d\-._~:/?#\[\]@!$&\'()*+,;=]+'
    links = re.findall(pattern, text)
    return links


def replace_links(text: str, old_pattern: str, new_link: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        old_pattern: Regex –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏
        new_link: –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
        
    Returns:
        –¢–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    """
    return re.sub(old_pattern, new_link, text, flags=re.IGNORECASE)


def calculate_text_hash(text: str) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    
    Args:
        text: –¢–µ–∫—Å—Ç
        
    Returns:
        SHA256 —Ö–µ—à
    """
    return hashlib.sha256(text.encode('utf-8')).hexdigest()


def clean_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'\s+', ' ', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    text = text.strip()
    return text


def truncate_text(text: str, max_length: int = 4096, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã (–ª–∏–º–∏—Ç Telegram - 4096)
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def is_valid_telegram_username(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram username
    
    Args:
        username: Username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω
    """
    # Telegram username: 5-32 —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    pattern = r'^[a-zA-Z0-9_]{5,32}$'
    return bool(re.match(pattern, username))


def format_telegram_link(username: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Telegram username –≤ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    
    Args:
        username: Username (—Å @ –∏–ª–∏ –±–µ–∑)
        
    Returns:
        –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ t.me/username
    """
    # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.lstrip('@')
    return f"t.me/{username}"


def extract_channel_username(text: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞/—Å—Å—ã–ª–∫–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞
        
    Returns:
        Username –∏–ª–∏ None
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    patterns = [
        r't\.me/([a-zA-Z0-9_]+)',
        r'@([a-zA-Z0-9_]+)',
        r'telegram\.me/([a-zA-Z0-9_]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1)
    
    return None


def count_words(text: str) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    
    Args:
        text: –¢–µ–∫—Å—Ç
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    """
    return len(text.split())


def estimate_reading_time(text: str, words_per_minute: int = 200) -> int:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç
        words_per_minute: –°–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É (—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è)
        
    Returns:
        –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    words = count_words(text)
    minutes = words / words_per_minute
    return int(minutes * 60)


class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞"""
    
    def __init__(self, max_requests: int = 20, time_window: int = 60):
        """
        Args:
            max_requests: –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
            time_window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = []
    
    def is_allowed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        
        Returns:
            True –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω
        """
        import time
        
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests = [
            req_time for req_time in self.requests
            if current_time - req_time < self.time_window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests) < self.max_requests:
            self.requests.append(current_time)
            return True
        
        return False
    
    def wait_time(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            –°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
        """
        import time
        
        if not self.requests:
            return 0.0
        
        current_time = time.time()
        oldest_request = min(self.requests)
        wait = self.time_window - (current_time - oldest_request)
        
        return max(0.0, wait)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
telegram_rate_limiter = RateLimiter(max_requests=20, time_window=60)

