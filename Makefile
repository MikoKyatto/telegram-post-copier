# ü¶Ñ Makefile –¥–ª—è Telegram Post Copier
# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–ø–ª–æ—è

.PHONY: help setup install run docker-build docker-up docker-down docker-logs clean test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)ü¶Ñ Telegram Post Copier - Available Commands$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
	@echo "$(GREEN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	@bash setup.sh

install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements.txt

run: ## –ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞...$(NC)"
	python copier.py

run-bg: ## –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ (nohup)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–µ...$(NC)"
	nohup python copier.py > logs/copier.log 2>&1 &
	@echo "$(GREEN)‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ. –õ–æ–≥–∏: logs/copier.log$(NC)"

docker-build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
	@echo "$(GREEN)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker-compose build

docker-auth: ## –ü–µ—Ä–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram (Docker)
	@echo "$(GREEN)üîê –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...$(NC)"
	bash first-auth.sh

docker-up: ## –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	@if [ ! -f copier_session.session ]; then \
		echo "$(RED)‚ùå Session —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: make docker-auth$(NC)"; \
		exit 1; \
	fi
	docker-compose up -d
	@echo "$(GREEN)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!$(NC)"

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose down

docker-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose restart

docker-logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker-compose logs -f copier

docker-shell: ## –û—Ç–∫—Ä—ã—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker-compose exec copier /bin/bash

docker-rebuild: ## –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(GREEN)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose up -d --build

env-check: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"
	@echo ""
	@echo "Telegram API:"
	@grep "^API_ID" .env || echo "  $(RED)‚ùå API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"
	@grep "^API_HASH" .env | sed 's/=.*/=***/' || echo "  $(RED)‚ùå API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"
	@echo ""
	@echo "–ö–∞–Ω–∞–ª—ã:"
	@grep "^SOURCE_CHANNEL" .env || echo "  $(RED)‚ùå SOURCE_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"
	@grep "^TARGET_CHANNEL" .env || echo "  $(RED)‚ùå TARGET_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"
	@echo ""
	@echo "LLM:"
	@grep "^LLM_PROVIDER" .env || echo "  $(RED)‚ùå LLM_PROVIDER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"

clean: ## –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	rm -rf temp/*
	rm -rf processed_images/*
	rm -f copier.log
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

clean-all: clean ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è venv –∏ Docker)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ Docker –æ–±—Ä–∞–∑–æ–≤$(NC)"
	rm -rf venv
	docker-compose down -v --rmi all 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

backup-session: ## –ë—ç–∫–∞–ø —Å–µ—Å—Å–∏–∏ Telegram
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å–µ—Å—Å–∏–∏...$(NC)"
	@if [ -f copier_session.session ]; then \
		cp copier_session.session copier_session.session.backup; \
		echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: copier_session.session.backup$(NC)"; \
	else \
		echo "$(RED)‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(NC)"; \
	fi

restore-session: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram
	@echo "$(YELLOW)‚ôªÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...$(NC)"
	@if [ -f copier_session.session.backup ]; then \
		cp copier_session.session.backup copier_session.session; \
		echo "$(GREEN)‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"; \
	else \
		echo "$(RED)‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	python -m pytest tests/ -v || echo "$(YELLOW)‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã$(NC)"

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (flake8, black)
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	@command -v flake8 >/dev/null 2>&1 || pip install flake8
	@command -v black >/dev/null 2>&1 || pip install black
	flake8 *.py --max-line-length=100 --ignore=E501,W503
	black --check *.py

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	@command -v black >/dev/null 2>&1 || pip install black
	black *.py

status: ## –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã$(NC)"
	@echo ""
	@echo "$(YELLOW)Python –ø—Ä–æ—Ü–µ—Å—Å:$(NC)"
	@ps aux | grep copier.py | grep -v grep || echo "  –ù–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "$(YELLOW)Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:$(NC)"
	@docker-compose ps 2>/dev/null || echo "  Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "$(YELLOW)–õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫):$(NC)"
	@tail -n 5 copier.log 2>/dev/null || echo "  –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

update: ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	pip install --upgrade -r requirements.txt

git-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	@echo "$(GREEN)üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git...$(NC)"
	@if [ ! -d .git ]; then \
		git init; \
		echo "$(GREEN)‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω$(NC)"; \
	else \
		echo "$(YELLOW)‚ÑπÔ∏è  Git —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω$(NC)"; \
	fi
	git add .
	@echo "$(GREEN)‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ staging$(NC)"
	@echo ""
	@echo "–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
	@echo "  git commit -m 'Initial commit'"
	@echo "  git remote add origin YOUR_REPO_URL"
	@echo "  git push -u origin main"

git-push: ## –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub
	@echo "$(GREEN)üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub...$(NC)"
	bash git-push.sh "Update from Makefile"

deploy: ## –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ç—Ä–µ–±—É–µ—Ç—Å—è: make deploy SERVER=user@ip)
	@if [ -z "$(SERVER)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: make deploy SERVER=user@server_ip$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ $(SERVER)...$(NC)"
	bash deploy.sh $(SERVER)

backup-create: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	bash backup.sh

fix-permissions: ## –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Docker
	@echo "$(GREEN)üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...$(NC)"
	mkdir -p temp processed_images logs
	chmod 777 temp processed_images logs 2>/dev/null || true
	chmod 600 .env 2>/dev/null || true
	chmod 600 *.session 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –ü—Ä–∞–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã$(NC)"

.DEFAULT_GOAL := help

