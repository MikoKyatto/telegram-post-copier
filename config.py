"""
üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Telegram Post Copier
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
from dotenv import load_dotenv

load_dotenv()


class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # üîë Telegram API
    API_ID = int(os.getenv('API_ID', 0))
    API_HASH = os.getenv('API_HASH', '')
    SESSION_NAME = 'temp/copier_session'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º temp/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–∞–≤–∞–º–∏ 777
    
    # üì¢ –ö–∞–Ω–∞–ª—ã
    SOURCE_CHANNEL = os.getenv('SOURCE_CHANNEL', '')
    TARGET_CHANNEL = os.getenv('TARGET_CHANNEL', '')
    
    # üß† LLM Configuration (multi-provider with auto-fallback)
    LLM_PROVIDER = os.getenv('LLM_PROVIDER', 'auto')  # auto, openai, deepseek, xai, google, cohere, huggingface
    LLM_MODEL = os.getenv('LLM_MODEL', 'auto')  # auto or specific model
    LLM_TEMPERATURE = float(os.getenv('LLM_TEMPERATURE', '0.7'))
    
    # API Keys (fill in available ones - bot will try all automatically)
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', '')
    XAI_API_KEY = os.getenv('XAI_API_KEY', '')
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '')  # Google AI Studio (Gemini) - FREE
    COHERE_API_KEY = os.getenv('COHERE_API_KEY', '')  # Cohere - has free tier
    HUGGINGFACE_API_KEY = os.getenv('HUGGINGFACE_API_KEY', '')  # HuggingFace - FREE
    
    # üîó –ë—Ä–µ–Ω–¥–∏–Ω–≥
    YOUR_LINK = os.getenv('YOUR_LINK', 't.me/your_channel')
    YOUR_BRAND_NAME = os.getenv('YOUR_BRAND_NAME', '–í–∞—à VPN')
    
    # üéØ –°—Ç–∏–ª—å –∫–∞–Ω–∞–ª–∞
    CHANNEL_STYLE = os.getenv(
        'CHANNEL_STYLE',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –æ–±—Ö–æ–¥ —á–µ—Ä–µ–∑ VPN'
    )
    
    # ‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '300'))  # —Å–µ–∫—É–Ω–¥—ã
    MAX_RETRIES = int(os.getenv('MAX_RETRIES', '3'))
    
    # üîç OCR –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    OCR_LANGUAGE = os.getenv('OCR_LANGUAGE', 'rus+eng')
    OLD_LINK_PATTERN = os.getenv(
        'OLD_LINK_PATTERN',
        't.me/na_svyazi_helpdesk|t.me/nasvyazi'
    )
    
    # üìÅ –ü—É—Ç–∏
    TEMP_DIR = 'temp'
    PROCESSED_DIR = 'processed_images'
    
    @classmethod
    def validate(cls):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []
        
        if not cls.API_ID or cls.API_ID == 0:
            errors.append("‚ùå API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not cls.API_HASH:
            errors.append("‚ùå API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not cls.SOURCE_CHANNEL:
            errors.append("‚ùå SOURCE_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not cls.TARGET_CHANNEL:
            errors.append("‚ùå TARGET_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        # LLM –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ AI
        has_llm_key = any([
            cls.OPENAI_API_KEY,
            cls.DEEPSEEK_API_KEY,
            cls.XAI_API_KEY,
            cls.GOOGLE_API_KEY,
            cls.COHERE_API_KEY,
            cls.HUGGINGFACE_API_KEY
        ])
        
        if not has_llm_key:
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ—à–∏–±–∫–∞ - –±–æ—Ç –º–æ–∂–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ AI
            pass
            
        return errors


# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(Config.TEMP_DIR, exist_ok=True)
os.makedirs(Config.PROCESSED_DIR, exist_ok=True)

