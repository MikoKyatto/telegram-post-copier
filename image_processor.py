"""
üé® Image Processor - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OCR –∏ –∑–∞–º–µ–Ω–æ–π —Ç–µ–∫—Å—Ç–∞
–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ –ø–æ—Å—Ç–æ–≤ Telegram
"""

import cv2
import pytesseract
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import re
import logging
from typing import Optional, Tuple
from config import Config

logger = logging.getLogger(__name__)


class ImageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞/—Å—Å—ã–ª–æ–∫"""
    
    def __init__(self):
        self.old_link_pattern = Config.OLD_LINK_PATTERN
        self.new_link = Config.YOUR_LINK
        self.ocr_language = Config.OCR_LANGUAGE
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract (–ø—É—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        try:
            pytesseract.get_tesseract_version()
        except Exception:
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
            possible_paths = [
                '/usr/bin/tesseract',
                '/usr/local/bin/tesseract',
                'C:\\Program Files\\Tesseract-OCR\\tesseract.exe',
                '/opt/homebrew/bin/tesseract'
            ]
            for path in possible_paths:
                try:
                    pytesseract.pytesseract.tesseract_cmd = path
                    pytesseract.get_tesseract_version()
                    break
                except:
                    continue
    
    def process_image(self, image_bytes: bytes) -> Tuple[bytes, bool]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∏—â–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            Tuple[bytes, bool]: (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –±—ã–ª –ª–∏ –∏–∑–º–µ–Ω–µ–Ω)
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            nparr = np.frombuffer(image_bytes, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if img is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return image_bytes, False
            
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            found_links = self._find_links_in_image(img)
            
            if not found_links:
                logger.info("–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                return image_bytes, False
            
            # –ó–∞–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            modified_img = self._replace_links_in_image(img, found_links)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
            success, buffer = cv2.imencode('.png', modified_img)
            if not success:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return image_bytes, False
            
            return buffer.tobytes(), True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image_bytes, False
    
    def _find_links_in_image(self, img: np.ndarray) -> list:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é OCR
        
        Returns:
            List of dicts with link info: {'text': str, 'x': int, 'y': int, 'w': int, 'h': int}
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=30)
            
            # OCR
            data = pytesseract.image_to_data(
                gray,
                lang=self.ocr_language,
                output_type=pytesseract.Output.DICT
            )
            
            found_links = []
            n_boxes = len(data['text'])
            
            for i in range(n_boxes):
                text = data['text'][i].strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å—Å—ã–ª–∫–∏
                if re.search(self.old_link_pattern, text, re.IGNORECASE):
                    x, y, w, h = data['left'][i], data['top'][i], data['width'][i], data['height'][i]
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏
                    if w > 10 and h > 5:
                        found_links.append({
                            'text': text,
                            'x': x,
                            'y': y,
                            'w': w,
                            'h': h
                        })
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {text} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")
            
            return found_links
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
            return []
    
    def _replace_links_in_image(self, img: np.ndarray, links: list) -> np.ndarray:
        """
        –ó–∞–º–µ–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ
        
        Args:
            img: OpenCV –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            links: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            
        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        try:
            result_img = img.copy()
            
            for link in links:
                x, y, w, h = link['x'], link['y'], link['w'], link['h']
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                padding = 5
                x = max(0, x - padding)
                y = max(0, y - padding)
                w = w + 2 * padding
                h = h + 2 * padding
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è inpainting
                mask = np.zeros(result_img.shape[:2], np.uint8)
                cv2.rectangle(mask, (x, y), (x + w, y + h), 255, -1)
                
                # Inpainting - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                result_img = cv2.inpaint(result_img, mask, 3, cv2.INPAINT_TELEA)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å Pillow
                result_img = self._add_text_to_image(result_img, self.new_link, x, y, h)
            
            return result_img
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—Å—ã–ª–æ–∫: {e}")
            return img
    
    def _add_text_to_image(
        self,
        img: np.ndarray,
        text: str,
        x: int,
        y: int,
        height: int
    ) -> np.ndarray:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            img: OpenCV –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            text: –¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            height: –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞)
            
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL
            pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
            draw = ImageDraw.Draw(pil_img)
            
            # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã—Å–æ—Ç–µ
            font_size = max(12, int(height * 0.7))
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                font = None
                font_paths = [
                    '/System/Library/Fonts/Helvetica.ttc',  # macOS
                    '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',  # Linux
                    'C:\\Windows\\Fonts\\arial.ttf',  # Windows
                    '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf'  # Linux alt
                ]
                
                for font_path in font_paths:
                    try:
                        font = ImageFont.truetype(font_path, font_size)
                        break
                    except:
                        continue
                
                if font is None:
                    font = ImageFont.load_default()
                    
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç: {e}")
                font = ImageFont.load_default()
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç (–±–µ–ª—ã–π —Å —á–µ—Ä–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
            # –û–±–≤–æ–¥–∫–∞
            for offset_x in [-1, 0, 1]:
                for offset_y in [-1, 0, 1]:
                    draw.text((x + offset_x, y + offset_y), text, fill=(0, 0, 0), font=font)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), text, fill=(255, 255, 255), font=font)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenCV
            return cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return img
    
    def has_text(self, image_bytes: bytes) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω
        """
        try:
            nparr = np.frombuffer(image_bytes, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if img is None:
                return False
            
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            text = pytesseract.image_to_string(gray, lang=self.ocr_language)
            
            return len(text.strip()) > 5
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False


# Singleton instance
_image_processor = None

def get_image_processor() -> ImageProcessor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    global _image_processor
    if _image_processor is None:
        _image_processor = ImageProcessor()
    return _image_processor

