"""
ü§ñ Telegram Post Copier with AI Agent
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import sys
import re
from io import BytesIO
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import InputChannel, MessageMediaPhoto
from telethon.errors import FloodWaitError, SessionPasswordNeededError

from config import Config
from llm_client import get_llm_client
from image_processor import get_image_processor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
import os
from logging.handlers import RotatingFileHandler

os.makedirs('logs', exist_ok=True)

# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤: –º–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª, —Ö—Ä–∞–Ω–∏—Ç—å 5 —Ñ–∞–π–ª–æ–≤
file_handler = RotatingFileHandler(
    'logs/copier.log',
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,  # –•—Ä–∞–Ω–∏—Ç—å 5 —Ñ–∞–π–ª–æ–≤
    encoding='utf-8'
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        file_handler
    ]
)
logger = logging.getLogger(__name__)


class TelegramPostCopier:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = Config.validate()
        if errors:
            for error in errors:
                logger.error(error)
            raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.client = TelegramClient(
            Config.SESSION_NAME,
            Config.API_ID,
            Config.API_HASH
        )
        self.llm_client = get_llm_client()
        self.image_processor = get_image_processor()
        
        self.source_entity = None
        self.target_entity = None
        self.groups = {}  # –ë—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ–¥–∏–∞ –ø–æ grouped_id
        self.group_timers = {}  # –¢–∞–π–º–µ—Ä—ã –¥–ª—è flush –≥—Ä—É–ø–ø
        self.is_running = False
        
        logger.info("üöÄ TelegramPostCopier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            logger.info("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.start()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–æ–≤
            await self._init_channels()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è event handler –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.client.add_event_handler(
                self._new_message_handler,
                events.NewMessage(chats=self.source_entity)
            )
            logger.info("üì° Event-based –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
    
    async def _init_channels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
            logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: {Config.SOURCE_CHANNEL}")
            self.source_entity = await self.client.get_entity(Config.SOURCE_CHANNEL)
            logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª: {self.source_entity.title}")
            
            # –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            logger.info(f"üì¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {Config.TARGET_CHANNEL}")
            self.target_entity = await self.client.get_entity(Config.TARGET_CHANNEL)
            logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {self.target_entity.title}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            raise
    
    async def _new_message_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (event-based)"""
        try:
            msg = event.message
            group_id = msg.grouped_id
            
            logger.info(f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {msg.id} (grouped_id: {group_id or 'None'})")
            
            if group_id:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
                if group_id not in self.groups:
                    self.groups[group_id] = []
                
                self.groups[group_id].append(msg)
                
                # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –±—ã–ª
                if group_id in self.group_timers:
                    self.group_timers[group_id].cancel()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è flush –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                # (—á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞)
                timer = asyncio.create_task(self._flush_group_after_delay(group_id, delay=2.0))
                self.group_timers[group_id] = timer
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                await self._process_and_copy_group([msg])
                await asyncio.sleep(2)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
    
    async def _flush_group_after_delay(self, group_id, delay: float):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã (–ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞)"""
        try:
            await asyncio.sleep(delay)
            
            if group_id in self.groups:
                msgs = self.groups.pop(group_id)
                self.group_timers.pop(group_id, None)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                msgs.sort(key=lambda m: m.id)
                
                logger.info(f"üì¶ Flush –≥—Ä—É–ø–ø—ã {group_id}: —Å–æ–±—Ä–∞–Ω–æ {len(msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                await self._process_and_copy_group(msgs)
                await asyncio.sleep(2)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥
                
        except asyncio.CancelledError:
            # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–ø—Ä–∏—à–ª–æ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É)
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ flush –≥—Ä—É–ø–ø—ã {group_id}: {e}", exc_info=True)
    
    async def _process_and_copy_group(self, messages: list):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ)
        
        Args:
            messages: List of Telethon Message objects (–º–æ–∂–µ—Ç –±—ã—Ç—å 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        """
        try:
            if not messages:
                return
            
            first_msg = messages[0]
            group_id = first_msg.grouped_id
            
            if len(messages) > 1:
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ ID {group_id} ({len(messages)} –º–µ–¥–∏–∞)")
            else:
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ ID {first_msg.id}")
            
            # –¢–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            original_text = first_msg.text or ""
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
            has_links = bool(re.search(r'(t\.me/|https?://)', original_text))
            
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
            if original_text:
                logger.info("üß† AI: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
                rewritten_text = self.llm_client.rewrite_text(original_text, has_links)
                
                uniqueness = self.llm_client.check_uniqueness(original_text, rewritten_text)
                logger.info(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {uniqueness:.1f}%")
                
                # –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                if uniqueness < 30:
                    logger.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞...")
                    rewritten_text = self.llm_client.enhance_with_cta(rewritten_text)
            else:
                rewritten_text = ""
            
            # Telegram –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º—É: 1024 —Å–∏–º–≤–æ–ª–∞
            MAX_CAPTION_LENGTH = 1024
            if len(rewritten_text) > MAX_CAPTION_LENGTH:
                logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ (–±—ã–ª–æ {len(rewritten_text)})")
                rewritten_text = rewritten_text[:MAX_CAPTION_LENGTH-3] + "..."
            
            # –°–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
            media_list = []
            for msg in messages:
                if msg.photo or (msg.media and hasattr(msg.media, 'photo')):
                    logger.info(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ID {msg.id}...")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ bytes
                    photo_bytes = await msg.download_media(bytes)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (–∑–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫)
                    processed_photo, was_modified = self.image_processor.process_image(photo_bytes)
                    
                    if was_modified:
                        logger.info("‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ (—Å—Å—ã–ª–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã)")
                    
                    media_list.append(processed_photo)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if media_list:
                if len(media_list) > 1:
                    # –ê–ª—å–±–æ–º (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
                    await self._copy_media_album(media_list, rewritten_text)
                else:
                    # –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    await self._copy_single_photo(media_list[0], rewritten_text)
            elif rewritten_text:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self._copy_text_message(rewritten_text)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if len(messages) > 1:
                logger.info(f"‚úÖ –ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ({len(messages)} –º–µ–¥–∏–∞)")
            else:
                logger.info(f"‚úÖ –ü–æ—Å—Ç ID {first_msg.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
    
    async def _copy_single_photo(self, photo_bytes: bytes, text: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º BytesIO —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            bio = BytesIO(photo_bytes)
            bio.name = "photo.jpg"  # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º!
            bio.seek(0)  # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
            
            await self.client.send_file(
                self.target_entity,
                bio,
                caption=text if text else None
            )
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            await self._copy_single_photo(photo_bytes, text)  # Retry
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            raise
    
    async def _copy_media_album(self, media_list: list, text: str):
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        
        Args:
            media_list: List[bytes] - —Å–ø–∏—Å–æ–∫ –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            text: str - –ø–æ–¥–ø–∏—Å—å –∫ –∞–ª—å–±–æ–º—É
        """
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ ({len(media_list)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            files = []
            for idx, photo_bytes in enumerate(media_list):
                bio = BytesIO(photo_bytes)
                bio.name = f"photo_{idx + 1}.jpg"  # –í–ê–ñ–ù–û: –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º!
                bio.seek(0)  # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                files.append(bio)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–ª—å–±–æ–º (–æ–¥–∏–Ω –≤—ã–∑–æ–≤ send_file —Å –º–∞—Å—Å–∏–≤–æ–º)
            await self.client.send_file(
                self.target_entity,
                files,
                caption=text if text else None
            )
            
            logger.info(f"‚úÖ –ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({len(media_list)} —Ñ–æ—Ç–æ)")
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            await self._copy_media_album(media_list, text)  # Retry
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞: {e}", exc_info=True)
            raise
    
    async def _copy_text_message(self, text: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not text or len(text.strip()) < 3:
                logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞...")
            
            await self.client.send_message(self.target_entity, text)
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            await self._copy_text_message(text)  # Retry
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            raise
    
    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫ event-based –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)"""
        self.is_running = True
        
        logger.info("üîÅ –ó–∞–ø—É—Å–∫ event-based –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
        logger.info("üí° –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            await self.client.run_until_disconnected()
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        finally:
            self.is_running = False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TelegramPostCopier...")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        for timer in self.group_timers.values():
            timer.cancel()
        
        await self.client.disconnect()
        logger.info("üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 60)
    logger.info("ü¶Ñ TELEGRAM POST COPIER WITH AI")
    logger.info("   Unicorn-style automation for your content")
    logger.info("=" * 60)
    logger.info(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"ü§ñ LLM Provider: {Config.LLM_PROVIDER}")
    logger.info(f"üì° Source: {Config.SOURCE_CHANNEL}")
    logger.info(f"üì¢ Target: {Config.TARGET_CHANNEL}")
    logger.info("=" * 60)
    
    copier = TelegramPostCopier()
    
    try:
        await copier.start()
        await copier.run_forever()
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1
    finally:
        await copier.stop()
    
    logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
