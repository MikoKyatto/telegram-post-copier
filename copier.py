"""
ü§ñ Telegram Post Copier with AI Agent
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import sys
import re
from io import BytesIO
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import InputChannel, MessageMediaPhoto
from telethon.errors import FloodWaitError, SessionPasswordNeededError

from config import Config
from llm_client import get_llm_client
from image_processor import get_image_processor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/copier.log')
    ]
)
logger = logging.getLogger(__name__)


class TelegramPostCopier:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = Config.validate()
        if errors:
            for error in errors:
                logger.error(error)
            raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.client = TelegramClient(
            Config.SESSION_NAME,
            Config.API_ID,
            Config.API_HASH
        )
        self.llm_client = get_llm_client()
        self.image_processor = get_image_processor()
        
        self.source_entity = None
        self.target_entity = None
        self.last_post_id = 0
        self.is_running = False
        
        logger.info("üöÄ TelegramPostCopier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            logger.info("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.start()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–æ–≤
            await self._init_channels()
            
            logger.info("‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
    
    async def _init_channels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
            logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: {Config.SOURCE_CHANNEL}")
            self.source_entity = await self.client.get_entity(Config.SOURCE_CHANNEL)
            logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª: {self.source_entity.title}")
            
            # –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            logger.info(f"üì¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {Config.TARGET_CHANNEL}")
            self.target_entity = await self.client.get_entity(Config.TARGET_CHANNEL)
            logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {self.target_entity.title}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            messages = await self.client.get_messages(self.source_entity, limit=1)
            if messages:
                self.last_post_id = messages[0].id
                logger.info(f"üìå –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: –ø–æ—Å—Ç ID {self.last_post_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            raise
    
    async def check_and_copy_new_posts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
            messages = await self.client.get_messages(self.source_entity, limit=5)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            new_messages = [m for m in reversed(messages) if m.id > self.last_post_id]
            
            for message in new_messages:
                await self._process_and_copy_message(message)
                self.last_post_id = message.id
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
                await asyncio.sleep(2)
            
            if new_messages:
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _process_and_copy_message(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: Telethon Message –æ–±—ä–µ–∫—Ç
        """
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ ID {message.id}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            original_text = message.text or ""
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
            has_links = bool(re.search(r'(t\.me/|https?://)', original_text))
            
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
            if original_text:
                logger.info("üß† AI: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
                rewritten_text = self.llm_client.rewrite_text(original_text, has_links)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                uniqueness = self.llm_client.check_uniqueness(original_text, rewritten_text)
                logger.info(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {uniqueness:.1f}%")
                
                # –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º CTA
                if uniqueness < 30:
                    logger.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CTA –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏...")
                    rewritten_text = self.llm_client.enhance_with_cta(rewritten_text)
            else:
                rewritten_text = ""
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if message.photo:
                await self._copy_message_with_photo(message, rewritten_text)
            else:
                await self._copy_text_message(rewritten_text)
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç ID {message.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ ID {message.id}: {e}")
    
    async def _copy_message_with_photo(self, message, text: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
        try:
            logger.info("üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
            photo_bytes = await message.download_media(bytes)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫)
            processed_photo, was_modified = self.image_processor.process_image(photo_bytes)
            
            if was_modified:
                logger.info("‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ (—Å—Å—ã–ª–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã)")
            else:
                logger.info("‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            await self.client.send_file(
                self.target_entity,
                processed_photo,
                caption=text,
                file=BytesIO(processed_photo)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            raise
    
    async def _copy_text_message(self, text: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not text or len(text.strip()) < 3:
                logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            await self.client.send_message(self.target_entity, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            raise
    
    async def run_forever(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        retry_count = 0
        
        logger.info(f"üîÅ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {Config.CHECK_INTERVAL}—Å–µ–∫)")
        
        while self.is_running:
            try:
                await self.check_and_copy_new_posts()
                retry_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(Config.CHECK_INTERVAL)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self.is_running = False
                break
            except Exception as e:
                retry_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{Config.MAX_RETRIES}): {e}")
                
                if retry_count >= Config.MAX_RETRIES:
                    logger.critical("üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                    self.is_running = False
                    break
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                wait_time = min(300, 30 * (2 ** retry_count))
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(wait_time)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TelegramPostCopier...")
        self.is_running = False
        await self.client.disconnect()
        logger.info("üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 60)
    logger.info("ü¶Ñ TELEGRAM POST COPIER WITH AI")
    logger.info("   Unicorn-style automation for your content")
    logger.info("=" * 60)
    logger.info(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"ü§ñ LLM Provider: {Config.LLM_PROVIDER}")
    logger.info(f"üì° Source: {Config.SOURCE_CHANNEL}")
    logger.info(f"üì¢ Target: {Config.TARGET_CHANNEL}")
    logger.info("=" * 60)
    
    copier = TelegramPostCopier()
    
    try:
        await copier.start()
        await copier.run_forever()
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1
    finally:
        await copier.stop()
    
    logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)

