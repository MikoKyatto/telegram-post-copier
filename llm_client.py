"""
üß† LLM Client - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: OpenAI, DeepSeek, xAI Grok
"""

import requests
from typing import Optional
from config import Config
import logging

logger = logging.getLogger(__name__)


class LLMClient:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM API"""
    
    def __init__(self):
        self.provider = Config.LLM_PROVIDER.lower()
        self.model = Config.LLM_MODEL
        self.temperature = Config.LLM_TEMPERATURE
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.provider == 'openai':
            from openai import OpenAI
            self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
            self.api_type = 'openai'
        elif self.provider == 'deepseek':
            # DeepSeek –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
            from openai import OpenAI
            self.client = OpenAI(
                api_key=Config.DEEPSEEK_API_KEY,
                base_url="https://api.deepseek.com"
            )
            self.api_type = 'openai'
        elif self.provider == 'xai':
            # xAI Grok —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
            from openai import OpenAI
            self.client = OpenAI(
                api_key=Config.XAI_API_KEY,
                base_url="https://api.x.ai/v1"
            )
            self.api_type = 'openai'
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider}")
    
    def rewrite_text(self, original_text: str, has_links: bool = True) -> str:
        """
        –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –¥–µ–ª–∞—è –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        
        Args:
            original_text: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            has_links: –ï—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
            
        Returns:
            –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            if not original_text or len(original_text.strip()) < 10:
                return original_text
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫
            if has_links:
                prompt = self._build_rewrite_prompt_with_links(original_text)
            else:
                prompt = self._build_rewrite_prompt_simple(original_text)
            
            # –í—ã–∑–æ–≤ API
            if self.api_type == 'openai':
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª, –Ω–æ –¥–µ–ª–∞—è –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    temperature=self.temperature,
                    max_tokens=1000
                )
                return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return original_text
    
    def _build_rewrite_prompt_with_links(self, text: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        return f"""–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–ª –≤–µ—Å—å —Å–º—ã—Å–ª:

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢:
{text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ó–∞–º–µ–Ω–∏ –í–°–ï —Å—Å—ã–ª–∫–∏ (t.me/..., https://...) –Ω–∞ "{Config.YOUR_LINK}"
2. –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Ñ–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏
3. –î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –ø—Ä–æ VPN –≤ –∫–æ–Ω—Ü–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å: {Config.CHANNEL_STYLE}
5. –£–ø–æ–º—è–Ω–∏ "{Config.YOUR_BRAND_NAME}" –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
6. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ä–µ–≥–∏–æ–Ω—ã, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –≤—Ä–µ–º—è
7. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ —Å—Ä–æ—á–Ω—ã–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
8. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–ø–æ –¥–∞–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" - –ø–∏—à–∏ –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞

–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –¢–ï–ö–°–¢:"""
    
    def _build_rewrite_prompt_simple(self, text: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å—Å—ã–ª–æ–∫"""
        return f"""–°–ª–µ–≥–∫–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Ñ–∞–∫—Ç—ã:

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢:
{text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: —Ä–µ–≥–∏–æ–Ω—ã, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –≤—Ä–µ–º—è
2. –°–ª–µ–≥–∫–∞ –∏–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –î–æ–±–∞–≤—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "{Config.YOUR_BRAND_NAME}" –∫–∞–∫ —Ä–µ—à–µ–Ω–∏—è (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ)
4. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å: {Config.CHANNEL_STYLE}
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –∂–∏–≤—ã–º

–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –¢–ï–ö–°–¢:"""
    
    def check_uniqueness(self, original: str, rewritten: str) -> float:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        
        Returns:
            –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∏—è (0-100)
        """
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤
        original_words = set(original.lower().split())
        rewritten_words = set(rewritten.lower().split())
        
        if not original_words:
            return 0.0
        
        different_words = rewritten_words - original_words
        uniqueness = (len(different_words) / len(original_words)) * 100
        
        return min(uniqueness, 100.0)
    
    def enhance_with_cta(self, text: str) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç Call-to-Action –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            
        Returns:
            –¢–µ–∫—Å—Ç —Å CTA
        """
        try:
            prompt = f"""–î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π Call-to-Action (–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é) –≤ –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

–¢–ï–ö–°–¢:
{text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. CTA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ –∑–∞—â–∏—Ç—É –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ VPN
2. –£–ø–æ–º—è–Ω–∏ "{Config.YOUR_BRAND_NAME}"
3. –î–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É "{Config.YOUR_LINK}"
4. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
5. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç

–¢–ï–ö–°–¢ –° CTA:"""
            
            if self.api_type == 'openai':
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.5,
                    max_tokens=500
                )
                return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ CTA: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π CTA –≤—Ä—É—á–Ω—É—é
            return f"{text}\n\nüîí –ó–∞—â–∏—Ç–∏—Ç–µ—Å—å –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å {Config.YOUR_BRAND_NAME}: {Config.YOUR_LINK}"
    

# Singleton instance
_llm_client = None

def get_llm_client() -> LLMClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –∫–ª–∏–µ–Ω—Ç–∞"""
    global _llm_client
    if _llm_client is None:
        _llm_client = LLMClient()
    return _llm_client

